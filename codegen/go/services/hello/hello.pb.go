// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/hello/hello.proto

package hello

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// empty message
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6a1f8a22780e8d, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type HelloRequest struct {
	SenderName           string   `protobuf:"bytes,1,opt,name=senderName,proto3" json:"senderName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6a1f8a22780e8d, []int{1}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetSenderName() string {
	if m != nil {
		return m.SenderName
	}
	return ""
}

type HelloResponse struct {
	Greeting             string   `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6a1f8a22780e8d, []int{2}
}

func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloResponse.Unmarshal(m, b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return xxx_messageInfo_HelloResponse.Size(m)
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

type StreamResponse struct {
	Counter              int32    `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc6a1f8a22780e8d, []int{3}
}

func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResponse.Unmarshal(m, b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return xxx_messageInfo_StreamResponse.Size(m)
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "hello.Empty")
	proto.RegisterType((*HelloRequest)(nil), "hello.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "hello.HelloResponse")
	proto.RegisterType((*StreamResponse)(nil), "hello.StreamResponse")
}

func init() { proto.RegisterFile("services/hello/hello.proto", fileDescriptor_dc6a1f8a22780e8d) }

var fileDescriptor_dc6a1f8a22780e8d = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x6a, 0x84, 0x30,
	0x14, 0x45, 0x75, 0x91, 0x5a, 0x1f, 0xb6, 0x8b, 0xb4, 0x05, 0xc9, 0xa2, 0x94, 0xac, 0x4a, 0x0b,
	0xb6, 0xb4, 0xfe, 0x42, 0xb1, 0xab, 0x2e, 0xf4, 0x0b, 0xac, 0xf3, 0x70, 0x04, 0x4d, 0x9c, 0x24,
	0x0e, 0xcc, 0x7c, 0xfd, 0x60, 0x92, 0x11, 0xdd, 0x04, 0xee, 0xe5, 0x70, 0x73, 0x12, 0x60, 0x1a,
	0xd5, 0xb1, 0x6b, 0x50, 0x7f, 0xec, 0xb1, 0xef, 0xa5, 0x3b, 0xb3, 0x51, 0x49, 0x23, 0x29, 0xb1,
	0x81, 0x47, 0x40, 0x7e, 0x86, 0xd1, 0x9c, 0x78, 0x06, 0xc9, 0xef, 0xdc, 0x94, 0x78, 0x98, 0x50,
	0x1b, 0xfa, 0x0c, 0xa0, 0x51, 0xec, 0x50, 0xfd, 0xd5, 0x03, 0xa6, 0xe1, 0x4b, 0xf8, 0x1a, 0x97,
	0xab, 0x86, 0xbf, 0xc3, 0x9d, 0xe7, 0xf5, 0x28, 0x85, 0x46, 0xca, 0xe0, 0xb6, 0x55, 0x88, 0xa6,
	0x13, 0xad, 0xc7, 0x97, 0xcc, 0xdf, 0xe0, 0xbe, 0x32, 0x0a, 0xeb, 0x61, 0xa1, 0x53, 0x88, 0x1a,
	0x39, 0x09, 0x83, 0xca, 0xc2, 0xa4, 0xbc, 0xc6, 0xaf, 0xb3, 0x17, 0xa9, 0x9c, 0x3b, 0xcd, 0x81,
	0x14, 0xf3, 0x0e, 0x7d, 0xc8, 0x9c, 0xff, 0x5a, 0x93, 0x3d, 0x6e, 0x4b, 0xb7, 0xce, 0x03, 0x9a,
	0x43, 0x5c, 0xa0, 0x71, 0x97, 0xd2, 0xc4, 0x43, 0xf6, 0xa5, 0xec, 0xc9, 0xa7, 0xad, 0x11, 0x0f,
	0x3e, 0xc3, 0xff, 0x1b, 0xfb, 0x37, 0xdf, 0x97, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x12, 0x20,
	0x10, 0x39, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloServiceClient interface {
	// A simple RPC.
	Greet(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	GetStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HelloService_GetStreamClient, error)
}

type helloServiceClient struct {
	cc *grpc.ClientConn
}

func NewHelloServiceClient(cc *grpc.ClientConn) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) Greet(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/hello.HelloService/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) GetStream(ctx context.Context, in *Empty, opts ...grpc.CallOption) (HelloService_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[0], "/hello.HelloService/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloService_GetStreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type helloServiceGetStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceGetStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServiceServer is the server API for HelloService service.
type HelloServiceServer interface {
	// A simple RPC.
	Greet(context.Context, *HelloRequest) (*HelloResponse, error)
	GetStream(*Empty, HelloService_GetStreamServer) error
}

func RegisterHelloServiceServer(s *grpc.Server, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.HelloService/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Greet(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServiceServer).GetStream(m, &helloServiceGetStreamServer{stream})
}

type HelloService_GetStreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type helloServiceGetStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceGetStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _HelloService_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _HelloService_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/hello/hello.proto",
}
